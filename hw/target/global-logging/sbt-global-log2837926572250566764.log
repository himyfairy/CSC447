[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/Azure/CSC447/hw/src/main/scala/subtyping.scala","languageId":"scala","version":1,"text":"  // GENERATED\n/* INSTRUCTIONS\n *\n * Complete the exercises below.  For each \"EXERCISE\" comment, add\n * code immediately below the comment.\n *\n * Please see README.md for instructions, including compilation and testing.\n *\n * GRADING\n *\n * 1. Submissions MUST compile using SBT with UNCHANGED configuration and\n *    tests with no compilation errors.  Submissions with compilation errors\n *    will receive 0 points.  Note that refactoring the code will cause the\n *    tests to fail.\n *\n * 2. You MUST NOT edit the SBT configuration and tests.  Altering it in your\n *    submission will result in 0 points for this assignment.\n *\n * 3. You MUST NOT use while loops.  You must use recursion or higher-order\n *    functions instead.\n *\n * 4. You may declare auxiliary functions if you like.\n *\n * SUBMISSION\n *\n * 1. Submit this file on D2L before the deadline.\n *\n * 2. Late submissions will not be permitted because solutions will be\n *    discussed in class.\n *\n */\n\nobject subtyping:\n\n  // Instances of Counter have a integer field that can be incremented,\n  // decremented, or read.\n  class Counter:\n    private var n = 0\n    def increment() = { n = n + 1 }\n    def decrement() = { n = n - 1 }\n    def get(): Int = n\n\n  // EXERCISE 1: complete the following function.  The observeCounter\n  // function has one parameter f: a function that accepts (a reference to) a\n  // Counter instance but returns nothing.\n  //\n  // The observeCounter function should call f with (a reference to) an\n  // object (of a class extending Counter).\n  //\n  // Your class that extends Counter must keep track of the total number of\n  // times that increment/decrement have been called.\n  // I.e., if the increment method is called 3 times on an instance, and the\n  // decrement method is called 2 times on the same instance, then it should\n  // store 5 (somewhere other than the existing field n).\n  //\n  // observeCounter should call f, and then return the total number of times\n  // that increment/decrement were called on the instance by f.\n  def observeCounter(f: Counter => Unit): Int =\n    // TODO: Provide definition here.\n    throw UnsupportedOperationException()\n\n\n  // EXERCISE 2: complete the following function.  It is the same as\n  // observeCounter except that f has a parameter of type List[Counter] not\n  // Counter.\n  //\n  // f will insist that the List[Counter] has length 3.\n  //\n  // You must return a List[Int] not an Int.\n  //\n  // The first element of the result List[Int] must correspond to the number\n  // of times that increment/decrement were called on the first element of\n  // type List[Counter], similarly for the second and third elements.\n  def observeCounterList(f: List[Counter] => Unit): List[Int] =\n    // TODO: Provide definition here.\n    throw UnsupportedOperationException()\n\n  // EXERCISE 3: complete the following function.  It is the same as\n  // observeCounterList except that f has a parameter of type Array[Counter]\n  // not List[Counter].\n  //\n  // f will insist that the Array[Counter] has length 3.\n  //\n  // You must return a Array[Int] not a List[Int].\n  //\n  // The first element of the result Array[Int] must correspond to the number\n  // of times that increment/decrement were called on the first element of\n  // type Array[Counter], similarly for the second and third elements.\n  //\n  // In this exercise you are NOT allowed to asInstanceOf.\n  def observeCounterArray(f: Array[Counter] => Unit): Array[Int] =\n    // TODO: Provide definition here.\n    throw UnsupportedOperationException()\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@40cdc640, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/qilu/Documents/Git_Code/Azure/CSC447/hw/target/scala-3.0.1/zinc/inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Nov 5, 2021, 2:04:43 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
