[0m[[0m[0mdebug[0m] [0m[0m> Exec(testOnly storagetests, Some(e7d5f336-ece1-4689-af00-49428d0761aa), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / testOnly[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@6879e983, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"34","parents":[]},"eventTime":1634680955391,"message":"Compiling hw","dataKind":"compile-task","data":{"target":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/storage.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/subtyping.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/fp1.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/fp3.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/dynamic.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/fp2.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/interpreter.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/argpass.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"34","parents":[]},"eventTime":1634680955414,"message":"Compiled hw","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Compile"},"errors":0,"warnings":0,"time":23}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"35","parents":[]},"eventTime":1634680955418,"message":"Compiling hw-test","dataKind":"compile-task","data":{"target":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/subtypingtests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/storagetests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/UnitSpec.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/dynamictests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/fp3tests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/interpretertests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/fp1tests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/argpasstests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/test/scala/fp2tests.scala"},"buildTarget":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"35","parents":[]},"eventTime":1634680955427,"message":"Compiled hw-test","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/Users/qilu/Documents/Git_Code/CSC447/hw/#hw/Test"},"errors":0,"warnings":0,"time":9}})[0m
[0m[[0m[0minfo[0m] [0m[0m[32mstoragetests:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EX01 - constant5[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EX02 - constant[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EX03 - counter0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EX04 - counter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EX05 - getAndSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EX06 - getAndSetSpy[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32mstoragetests:\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32m- EX01 - constant5\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32m- EX02 - constant\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32m- EX03 - counter0\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32m- EX04 - counter\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32m- EX05 - getAndSet\u001b[0m"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[32m- EX06 - getAndSetSpy\u001b[0m"})[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 133 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 6[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 1, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 6, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"\u001b[36mRun completed in 133 milliseconds.\u001b[0m\n\u001b[36mTotal number of tests run: 6\u001b[0m\n\u001b[36mSuites: completed 1, aborted 0\u001b[0m\n\u001b[36mTests: succeeded 6, failed 0, canceled 0, ignored 0, pending 0\u001b[0m\n\u001b[32mAll tests passed.\u001b[0m"})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Oct 19, 2021, 5:02:35 PM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/qilu/Desktop/storage.scala","languageId":"scala","version":1,"text":"  // GENERATED\n/* INSTRUCTIONS\n *\n * Complete the exercises below.  For each \"EXERCISE\" comment, add code\n * immediately below the comment.\n *\n * Please see README.md for instructions, including compilation and testing.\n *\n * GRADING\n *\n * 1. Submissions MUST compile using SBT with UNCHANGED configuration and\n *    tests with no compilation errors.  Submissions with compilation errors\n *    will receive 0 points.  Note that refactoring the code will cause the\n *    tests to fail.\n *\n * 2. You MUST NOT edit the SBT configuration and tests.  Altering it in your\n *    submission will result in 0 points for this assignment.\n *\n * 3. You MAY use (re)assignment to variables and \"val\" and \"var\"\n *    declarations (you will have to).\n *\n * 4. In all of the exercises in this file, you can only add code between the\n *    existing \"{...}\" for the val/def.  That is, you cannot add a new\n *    val/def directly inside the \"storage\" object.\n *\n * SUBMISSION\n *\n * 1. Submit this file on D2L before the deadline.\n *\n * 2. Late submissions will not be permitted because solutions will be\n *    discussed in class.\n *\n */\n\nobject storage:\n\n  // EXERCISE 1: Complete the following definition, so that \"constant5\" is a\n  // function that returns 5 whenever it is invoked.\n  val constant5: () => Int = {\n    () => 5\n  }\n\n  // EXERCISE 2: Complete the following definition, so that \"constant\" is a\n  // function that when invoked with integer n returns a function that\n  // returns n whenever it is invoked.\n  val constant: Int => () => Int = {\n    (n: Int) => (() => n)\n  }\n\n  // EXERCISE 3: Complete the following definition, so that \"counter0\" is a\n  // (stateful) function that returns 0 when it is first invoked, then 1,\n  // then 2, etc.\n  //\n  // REMEMBER: you can use \"var\" but everything you add has to be inside the\n  // \"{...}\" body of \"counter0\".\n\n  // This rule applies throughout this assignment.\n  val counter0: () => Int = {\n    var n = -1\n    () => { \n      n = n + 1\n      n\n    }\n  }\n\n  // EXERCISE 4: Complete the following definition, so that \"counter\" is a\n  // (stateless) function that when invoked with integer n returns a\n  // (stateful) function that returns n when it is first invoked, then n+1,\n  // then n+2, etc.\n  //\n  // The counters must be independent, i.e., running \"counter (0)\" twice\n  // should yield two functions that do not interfere with one another's\n  // state.\n  val counter: Int => () => Int = {\n    (n: Int) => {\n      var num = n - 1\n      () => {\n        num = num + 1\n        num\n      }\n    }\n  }\n\n  // EXERCISE 5: Complete the following definition, so that \"getAndSet\" is a\n  // (stateless) function that when invoked with integer n returns a pair of\n  // functions (that share state) that allow reading and writing a var that\n  // is initialized with integer n.\n  //\n  // The first function in the pair should be the reader.  The second\n  // function in the pair should be the writer.\n  //\n  // For example, the following expression should return 10:\n  // { val (get, set) = getAndSet (5); set (10); get () }\n  //\n  // Multiple calls to \"getAndSet\" should yield independent pairs, i.e., the\n  // first pair returned should not share any state with the second pair\n  // returned.\n  val getAndSet: Int => (() => Int, Int => Unit) = {\n    (n: Int) => {\n      var num = n \n      def get: () => Int = () => num\n      def set: Int => Unit = (m: Int) => num = m\n      (get, set)\n    }\n  }\n\n  // EXERCISE 6: Complete the following definition, so that \"getAndSetSpy\" is\n  // a (stateful) function that when invoked it returns a pair.\n  //\n  // The second component of the pair should behave like \"getAndSet\" above\n  // (with the exception noted next).\n  //\n  // The first component of the pair is a function that, when invoked,\n  // returns the total number of times that a \"set\" call has been made.\n  //\n  // That number should cover all calls to \"set\" made in all pairs created\n  // via \"getAndSetSpy\".  That is, the total number is a piece of state\n  // shared all \"set\" functions created via \"getAndSetSpy\".\n  //\n  // For example:\n  // val (spy1, getAndSet1) = getAndSetSpy ()\n  // val (spy2, getAndSet2) = getAndSetSpy ()\n  // val (get1a, set1a) = getAndSet1 (0)\n  // val (get2a, set2a) = getAndSet2 (0)\n  // set1a(10)\n  // set2a(20)\n  // spy1()\n  //   val res1: Int = 2\n  //\n  // The result is 2, not 1.\n  //\n  val getAndSetSpy: () => (() => Int, Int => (() => Int, Int => Unit)) = {\n    var count = 0\n    () => {\n      val getAndSet: Int => (() => Int, Int => Unit) = {\n        (n: Int) => {\n          var num = n \n          def get: () => Int = () => num\n          def set: Int => Unit = (m: Int) => {\n            count = count + 1\n            num = m\n          }\n          (get, set)\n        }\n      }\n      \n      var getCount: () => Int = {() => count}\n      var getAndSetFun: Int => (() => Int, Int => Unit) = getAndSet\n      (getCount, getAndSetFun)\n    }\n  }\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨12, shutdown, null})[0m
