[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/qilu/Documents/Git_Code/CSC447/hw/src/main/scala/fp2.scala","languageId":"scala","version":1,"text":"  // GENERATED\n/* INSTRUCTIONS\n *\n * Complete the exercises below.  For each \"EXERCISE\" comment, add\n * code immediately below the comment.\n *\n * Please see README.md for instructions, including compilation and testing.\n *\n * GRADING\n *\n * 1. Submissions MUST compile using SBT with UNCHANGED configuration and\n *    tests with no compilation errors.  Submissions with compilation errors\n *    will receive 0 points.  Note that refactoring the code will cause the\n *    tests to fail.\n *\n * 2. You MUST NOT edit the SBT configuration and tests.  Altering it in your\n *    submission will result in 0 points for this assignment.\n *\n * 3. You MUST NOT use while loops or (re)assignment to variables (you can\n *    use \"val\" declarations, but not \"var\" declarations).  You must use\n *    recursion instead.\n *\n * 4. You may declare auxiliary functions if you like.\n *\n * SUBMISSION\n *\n * 1. Submit this file on D2L before the deadline.\n *\n * 2. Late submissions will not be permitted because solutions will be\n *    discussed in class.\n *\n */\n\nimport java.util.NoSuchElementException\nobject fp2:\n\n  // EXERCISE 1: complete the following recursive definition of a \"map\"\n  // function for Scala's builtin List type.  You must not use the builtin\n  // \"map\" method.\n  //\n  // Your implementation of \"map\" MUST be recursive.\n  def map[A, B](xs: List[A], f: A => B): List[B] =\n    xs match\n      case List() => Nil\n      case x :: xs1 => f(x) :: map(xs1, f)\n\n  // EXERCISE 2: complete the following recursive definition of a \"filter\"\n  // function for Scala's builtin List type.  You must not use the builtin\n  // \"filter\" method.\n  //\n  // Your implementation of \"filter\" MUST be recursive.\n  def filter[A](xs: List[A], f: A => Boolean): List[A] =\n    xs match\n      case List() => Nil\n      case x :: xs1 => \n        if f(x) then xs.head :: filter(xs1, f)\n        else filter(xs1, f)\n\n  // EXERCISE 3: complete the following recursive definition of an \"append\"\n  // function for Scala's builtin List type.  You must not use the builtin\n  // \":::\" method.\n  //\n  // Your implementation of \"append\" MUST be recursive.\n  //\n  // HINT: use \"::\" in the body of the cons-cell case.\n  def append[A](xs: List[A], ys: List[A]): List[A] =\n    xs match\n      case List() => ys\n      case x :: xs1 => x :: append(xs1, ys)\n\n  // EXERCISE 4: complete the following recursive definition of a \"flatten\"\n  // function for Scala's builtin List type.  You must not use the builtin\n  // \"flatten\" method.\n  //\n  // Your implementation of \"flatten\" MUST be recursive.\n  //\n  // HINT: use either \":::\" or your definition of \"append\" in the body of the\n  // cons-cell case.\n  //\n  // EXAMPLE:\n  // - flatten (List ((1 to 5).toList, (6 to 10).toList, (11 to 15).toList)) == (1 to 15).toList\n  def flatten[A](xss: List[List[A]]): List[A] =\n    xss match\n      case List() => Nil\n      case x :: xs1 => append(x, flatten(xs1))\n\n  // EXERCISE 5: complete the following recursive definition of a \"foldLeft\"\n  // function for Scala's builtin list type.  You must not use the builtin\n  // \"foldLeft\" method.\n  //\n  // Your implementation of \"foldLeft\" MUST be recursive.\n  //\n  // HINT:   foldLeft (  Nil, e, f) == e\n  //         foldLeft (y::ys, e, f) == foldLeft (ys, f (e, y), f)\n  def foldLeft[A, B](xs: List[A], e: B, f: (B, A) => B): B =\n    xs match \n      case List() => e\n      case x :: xs1 => foldLeft(xs1, f(e, x), f)\n\n  // EXERCISE 6: complete the following recursive definition of a \"foldRight\"\n  // function for Scala's builtin list type.  You must not use the builtin\n  // \"foldRight\" method.\n  //\n  // Your implementation of \"foldRight\" MUST be recursive.\n  //\n  // HINT:   foldRight (  Nil, e, f) == e\n  //         foldRight (y::ys, e, f) == f (y, foldRight (ys, e, f))\n  def foldRight[A, B](xs: List[A], e: B, f: (A, B) => B): B =\n    xs match \n      case List() => e\n      case x :: xs1 => f(x, foldRight(xs1, e, f))\n\n  // EXERCISE 7: complete the following definition of a \"joinTerminateRight\"\n  // function to take a list of strings \"xs\" and concatenate all strings\n  // using a string \"term\" as a terminator (not delimiter) between strings.\n  //\n  // You MUST use your foldRight defined above.\n  //\n  // You MAY NOT use recursion.\n  //\n  // EXAMPLES:\n  // - joinTerminateRight (Nil, \";\") == \"\"\n  // - joinTerminateRight (List (\"a\"), \";\") == \"a;\"\n  // - joinTerminateRight (List (\"a\",\"b\",\"c\",\"d\"), \";\") == \"a;b;c;d;\"\n  def joinTerminateRight(xs: List[String], term: String): String =\n    foldRight(xs, \"\", (_+term+_))\n\n  // EXERCISE 8: complete the following definition of a \"joinTerminateLeft\"\n  // function to take a list of strings \"xs\" and concatenate all strings\n  // using a string \"term\" as a terminator (not delimiter) between strings.\n  //\n  // You MUST use your foldLeft defined above.\n  //\n  // You MAY NOT use recursion.\n  //\n  // EXAMPLES:\n  // - joinTerminateLeft (Nil, \";\") == \"\"\n  // - joinTerminateLeft (List (\"a\"), \";\") == \"a;\"\n  // - joinTerminateLeft (List (\"a\",\"b\",\"c\",\"d\"), \";\") == \"a;b;c;d;\"\n  def joinTerminateLeft(xs: List[String], term: String): String =\n    foldLeft(xs, \"\", (_+_+term))\n\n  // EXERCISE 9: complete the following recursive definition of a\n  // \"firstNumGreaterThan\" function to find the first number greater than or\n  // equal to \"a\" in a list of integers \"xs\".\n  //\n  // If the list is empty or there is no number greater than or equal to \"a\",\n  // throw a java.util.NoSuchElementException (with no argument).\n  //\n  // Your implementation of \"firstNumGreaterThan\" MUST be recursive.\n  //\n  // EXAMPLES:\n  // - firstNumGreaterThan (5, List (4, 6, 8, 5)) == 6\n  def firstNumGreaterThan(a: Int, xs: List[Int]): Int =\n    xs match \n      case List() => throw java.util.NoSuchElementException()\n      case x :: xs1 => \n        if x >= a then x\n        else firstNumGreaterThan(a, xs1)\n\n  // EXERCISE 10: complete the following recursive definition of a\n  // \"firstIndexNumGreaterThan\" function to find the index (position) of the\n  // first number greater than or equal to \"a\" in a list of integers \"xs\".\n  //\n  // The first index should be zero (not one).\n  //\n  // If the list is empty or there is no number greater than or equal to \"a\",\n  // throw a java.util.NoSuchElementException (with no argument).\n  //\n  // Your implementation of \"firstIndexNumGreaterThan\" MUST be recursive.\n  //\n  // EXAMPLES:\n  // - firstIndexNumGreaterThan (5, List (4, 6, 8, 5)) == 1\n  //\n  // HINT: this is a bit easier to write if you use an auxiliary function.\n  def firstIndexNumGreaterThan(a: Int, xs: List[Int]): Int =\n    xs.indexOf(firstNumGreaterThan(a, xs))\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@75e4fe3c, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/qilu/Documents/Git_Code/CSC447/hw/target/scala-3.0.1/zinc/inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Sep 29, 2021, 2:21:57 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
